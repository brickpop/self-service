#!/bin/bash
PATH=./node_modules/.bin:$PATH
DOCKERFILE=docker-compose.yml

###############################################################################
# SERVER ACTIONS

function init {
  mkdir -p ~/storage/cetbot
  mkdir -p ~/storage/docker-registry
  mkdir -p ~/storage/wikidb
  ./init-letsencrypt.sh
}

function customize {
  if [ "$1" == "contact" ] ; then
    if [ "$2" == "" ] ; then
      echo "An email is required"
      exit 1
    fi
    sed -i s/user@email.com/$2/g ./init-letsencrypt.sh
  elif [ "$1" == "wiki-email" ] ; then
    if [ "$2" == "" ] ; then
      echo "An email is required"
      exit 1
    fi
    sed -i s/wiki-admin@domain.com/$2/g ./docker-compose.yml
  elif [ "$1" == "domain" ] ; then
    if [ "$2" == "" ] ; then
      echo "A domain is required"
      exit 1
    fi
    grep -R example.com . | cut -d':' -f1 | grep -v taskfile | uniq | while read f
      do sed -i s/example.com/$2/g $f
      done
  else
    echo "Invalid command"
    exit 1
  fi
}

function logs {
  docker-compose -f $DOCKERFILE logs -f $1
}

function ps {
  docker-compose ps
}

function build {
  docker-compose -f $DOCKERFILE build $1
}

function upgrade {
  build $1

  # will recreate newer container for updated images
  docker-compose -f $DOCKERFILE up -d --force-recreate $1
}

function restart {
  docker-compose -f $DOCKERFILE restart $1
}

function htpasswd {
  read -p "Password: " -s password
  docker run --rm --entrypoint htpasswd registry:2 -Bbn docker $password > services/nginx/docker-registry.htpasswd
}

function clean {
  if [ "$1" == "registry" ] ; then

    docker run --rm --link docker-registry \
      --network docker_proxy-network  anoxis/registry-cli \
      -r http://docker-registry:5000 --delete --num 2

    docker exec docker-registry \
      registry garbage-collect /etc/docker/registry/config.yml \
      --delete-untagged=true

  else
    echo "Make sure that you run this command while the containers you care are running"
    read -p "Tap enter to continue or exit with Ctrl+C" a
    
    docker network prune
    docker container prune --filter "until=24h"
    docker image prune -a --filter "until=168h"
    docker volume prune
  fi
}

###############################################################################
# DEVELOPER ACTIONS


###############################################################################
# HELPERS


###############################################################################
# DEFAULT => INFO

function default {
  echo "$0 <task> <args>"
  echo
  echo "Available tasks:"
  compgen -A function | cat -n
}


TIMEFORMAT="Task completed in %3lR"
time ${@:-default}